hibernate.hbm2ddl.auto=update
hibernate.showsql=true
hibernate.database=MYSQL
#hibernate二级缓存配置
hibernate.cache.use_second_level_cache=false
hibernate.cache.use_query_cache=true
hibernate.cache.region.factory_class=org.apache.ignite.cache.hibernate.HibernateRegionFactory
#mybatis二级缓存配置,redis=redis实现、ignite=ignite实现、不设置=禁用缓存
mybatis.cache.provider=
log.service.open=true

#线程池设置
#最小线程数
threadpool.minPoolSize=50
#最大线程数
threadpool.maxPoolSize=1000
#任务队列数量
threadpool.queueSize=100000

#captcha 处理service
captcha.service=
#true false 默认为false
captcha.isrequired=false

#testRealmStandard
#standardRealm
realm.bean.name=datahubRealm
logon.callback.names=dataHubLogonCallBack
logout.callback.names=dataHubLogoutCallBack

 
#shiro 会话管理器
#会话实现方案,redis=redis实现,jwt=jwt实现,local=内存版本实现,ignite=ignite实现
session.remote=local
#会话失效时间,单位毫秒
session.timeout=1800000
#session token关键字的后缀，如果设置为random则为随机数
token.postfix=
#配置页面的目录，必须使用绝对路径，启动后通过类似http://127.0.0.1:8080/xxxproject/page/xxx/xxx.html的方式访问
web.page.dic=/Users/fan/framework/standardProject/Client/Web/

#缓存配置
#redis=标明使用redis缓存，mem、或不设置或者其他=标明使用内存缓存，ignite=ignite实现
cacheManager.globalType=mem
#默认失效时间,单位秒
cacheManager.expire=1800

#redis配置
#是否为集群 默认为false
redisManager.isCluster=false
#redis服务连接串,多个服务以逗号分隔
redisManager.connectionString = 127.0.0.1:6379
#redis超时时间,默认2秒
redisManager.timeout=2000
#redis连接池最大连接数，默认50
redisManager.maxTotal=50
#redis连接池最大空闲数，默认8
redisManager.maxIdle=8

#jwk设置
# token的key地址
jwk.rsaJWK=rsajwk.json
# token允许的时间偏移（秒）,等于session时效时间是session.timeout+jwk.allowedClockSkewInSeconds时间
jwk.allowedClockSkewInSeconds=30
# jwt用于dubbo环境下的，通过redis传递临时session的时效，这里注意要比dubbo的执行超时时间略长，默认180秒
tempjwt.expire=

#jetty config
jetty.web.app.context.webapp=src/main/webapp
jetty.web.app.context.path=/datahub
jetty.web.app.context.port=8080
jetty.web.app.ssl.open=true
jetty.web.app.ssl.port=8443
jetty.web.app.ssl.keyStorePath=keystore
jetty.web.app.ssl.keyStorePassword=OBF:19iy19j019j219j419j619j8

#datasource
#数据源名称:service的包名，配置在service容器一方;
datasource.multiple=sso:com.sso.dao.*;

#分布式锁服务提供者,zookeeper=zookeeper实现、ignite=ignite实现、mem或不设置=内存实现
lock.provider=mem
#分布式原子数据提供者,zookeeper=zookeeper实现、ignite=ignite实现、mem或不设置=内存实现
atomiclong.provider=mem
#消息提供者,kafka=kafka实现、ignite=ignite实现、不配置=禁用此功能
message.provider=

#zookeeper配置
#zookeeper服务连接地址，多个以逗号分隔
zookeeper.connectionString=127.0.0.1:2181

#kafka配置
#kafka服务连接地址，多个以逗号分隔
kafka.bootstrap.servers=127.0.0.1:9092
#kafka producer连接池大小，默认10
kafka.producer.poolsize=10

#订阅的公共主题的前缀，默认为public
message.allowAnonymousPrefix=
#主题订阅过滤
message.topic.interceptor=
#文件服务根实现类型
#local=本地实现,fastdfs=fastdfs实现,hdfs=hdfs实现
fileservice.provider=local

#针对web发起的service调用的自定义过滤
service.call.filter=myServiceFilter

#使用freemaker做excel、word、excel文档导出时，配置字体和导出资源的目录，以当前运行的classpath为根路径
export.resource.path=export
export.fonts.path=export/fonts